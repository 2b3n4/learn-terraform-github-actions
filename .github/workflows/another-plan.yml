name: "Another Format, Validate, Plan Check"

on:
  pull_request:
    branches: [main]

env:
  TF_CLOUD_ORGANIZATION: "b3nsh-org"
  TF_WORKSPACE: api-driven
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.4
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: true

      - name: Truncate Terraform Plan Result and Update Pull Request
        id: truncate-plan-update-pr
        run: |
          plan_log="tfplan_log_$(date -u +%Y%m%d).log"
          echo "${{ steps.plan.outputs.stdout }}" > "$plan_log"
          length=$(stat -c%s "$plan_log")

          # Decide whether to display truncated or full plan and store the decision in a file
          if [[ $length -gt 100000 ]]; then
            tail -c 65000 "$plan_log" > truncated_plan.log
            echo "Truncated Plan result: "
            cat truncated_plan.log
            # Add 'EOF' to the end of the truncated plan file
            echo -e "\nEOF" >> truncated_plan.log
            echo "truncated" > display_decision.txt
          else
            cat "$plan_log"
            echo "full" > display_decision.txt
          fi

          # Read the decision and plan summary
          const fs = require('fs');
          const displayDecision = fs.readFileSync('display_decision.txt', 'utf8').trim();
          const planLogFileName = 'truncated_plan.log';

          # Read the plan output based on the previous decision
          planSummary=$(displayDecision === 'truncated'
            ? cat "$planLogFileName" | sed -e '$ s/^/EOF\n/' | head -n -1
            : cat "$planLogFileName"
          )

          # Prepare the comment body
          output=$(cat <<-END
            ### [api-driven]
            #### Terraform Format and Style 🖌\`${{ steps.format.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`

            <details><summary>Show Format</summary>
              \`\`\`n
              ${process.env.FORMAT}
              \`\`\`
            </details>

            <details><summary>Show Plan</summary>
              \`\`\`n
              ${planSummary}
              \`\`\`
            </details>
          END
          )

          # Create a comment on the pull request
          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });
        if: github.event_name == 'pull_request' && success()

      - name: Terraform Format Status
        if: steps.format.outcome == 'failure'
        run: exit 1

      - name: Terraform Validate Status
        if: steps.validate.outcome == 'failure'
        run: exit 1

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
