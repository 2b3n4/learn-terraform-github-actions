name: "Terraform format, validate, plan check"

on:
  pull_request:
    branches: [ master ]

env:
  TF_CLOUD_ORGANIZATION: "b3nsh-org"
  TF_WORKSPACE: api-driven
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"

jobs:
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node
        if: env.RUN_TF == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '14'

      - name: Setup Terraform
        if: env.RUN_TF == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.2.9
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        if: env.RUN_TF == 'true'
        id: format
        run: |
          cd ../
          terraform fmt -check --recursive
        continue-on-error: true

      - name: Terraform Init
        if: env.RUN_TF == 'true'
        id: init
        run: terraform init

      - name: Terraform Validate
        if: env.RUN_TF == 'true'
        id: validate
        run: |
          terraform validate -no-color
          echo "::set-output name=stdout::$(terraform validate -no-color)"
        continue-on-error: true

      - name: Terraform Plan
        if: env.RUN_TF == 'true' && github.event_name == 'pull_request'
        id: plan
        run: |
          terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        if: env.RUN_TF == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          FORMAT: "terraform\n${{ steps.format.outputs.stdout }}"
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `

            ### [api-driven]
            #### Terraform Format and Style üñå\`${{ steps.format.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Format</summary>

            \`\`\`\n
            ${{ process.env.FORMAT }}
            \`\`\`

            </details>

            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            <details><summary>Show Plan</summary>

            \`\`\`\n
            plan_log="tfplan_log_$(date -u +%Y%m%d).log"
            echo "${process.env.PLAN}" > "$plan_log" 2>&1
            length=$(echo "${process.env.PLAN}" | wc -c)

            if [[ $length -gt 100000 ]]; then
              aws s3 cp "$plan_log" "s3://tf-bucket/tf-plan-logs/"

              tail -c 65000 "$plan_log" > truncated_plan.log
              echo "Truncated Plan result: "
              cat truncated_plan.log
              echo "Please see complete log: s3://tf-bucket/tf-plan-logs/$plan_log"
            else
              ${process.env.PLAN}
            fi
            \`\`\`

            </details>

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });


      - name: Terraform Format Status
        if: steps.format.outcome == 'failure'
        run: exit 1

      - name: Terraform Validate Status
        if: steps.validate.outcome == 'failure'
        run: exit 1

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
